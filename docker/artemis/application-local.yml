# ===================================================================
# Artemis specific properties
# ===================================================================

artemis:
  # course-archives-path: ./exports/courses # a folder in which archived courses and exams are stored.
  # repo-clone-path: ./repos # a folder in which git repos for the online code editor are stored. In a multi node setup, this folder should be in a shared file system area (e.g. based on NFS), so that user can access the same files over multiple nodes
  # repo-download-clone-path: ./repos-download # a temporary folder, in which git repos are downloaded that are immediately deleted afterwards (e.g. exports, plagiarism checks), should NOT be in a shared file system area
  bcrypt-salt-rounds:
    11 # The number of salt rounds for the bcrypt password hashing. Lower numbers make it faster but more unsecure and vice versa.
    # Please use the bcrypt benchmark tool to determine the best number of rounds for your system. https://github.com/ls1intum/bcrypt-Benchmark
  user-management:
    use-external: false
    # password-reset:
    #   credential-provider: <provider> # The credential provider which users can log in though (e.g. TUMonline)
    #   links: # The password reset links for different languages
    #     en: "<link>"
    #     de: "<link>"
    # external:
    #   url: https://jira.ase.in.tum.de
    #   user: <username> # e.g. ga12abc
    #   password: <password>
    #   admin-group-name: tumuser
    # ldap: # the whole section is optional: whether user details (such as the registration number) can be obtained from a LDAP service
    # url: $LDAP_HOST:$LDAP_PORT
    # user-dn: "cn=$LDAP_ADMIN_USERNAME,dc=example,dc=org"
    # password: $LDAP_ADMIN_PASSWORD
    # base: "dc=example,dc=org"
    #   allowed-username-pattern: '^([a-z]{2}\d{2}[a-z]{3})$' # example for a TUM identifier, e.g. ab12cde
    internal-admin:
      username: "$ARTEMIS_ADMIN_USERNAME"
      password: "$ARTEMIS_ADMIN_PASSWORD"
    registration: # the whole section is optional: whether user can register in Artemis
      enabled: true
      cleanup-time-minutes: 60 # The amount of time until non-activated accounts are deleted automatically
      allowed-email-pattern: "$REGISTRATION_ALLOWED_EMAIL_PATTERN_NONE_READABLE"
      allowed-email-pattern-readable: "$REGISTRATION_ALLOWED_EMAIL_PATTERN_READABLE"
    accept-terms: false # whether users have to accept terms before they can log in, from a privacy point of view this is not needed during education, therefore the default value is false
    # course-registration:                    # the whole section is optional: whether there is a restriction for the self-registration of students in courses
    #     allowed-username-pattern: '^([a-z]{2}\d{2}[a-z]{3})$'    # example for a TUM identifier, e.g. ab12cde
    login:
      account-name: "$ARTEMIS_NAME" # optional: customization for the welcome page "please sign in with your <account-name> account"
  version-control:
    url: "$GITLAB_URL"
    user: "$GITLAB_ROOT_USER"
    password: "$GITLAB_ROOT_PASSWORD" # created in Gitlab Server Quickstart step 2
    token: "$ARTEMIS_ACCESS_TOKEN" # VCS API token giving Artemis full Admin access.
    ci-token: "$GITLAB_ACCESS_TOKEN" # Token generated by the CI (e.g. Jenkins) for webhooks from the VCS to the CI. Not needed for Bamboo+Bitbucket
    # ssh-template-clone-url: ssh://git@bitbucket.ase.in.tum.de:7999/ # Url Stem for cloning via ssh, for gitlab use 'ssh://git@artemistest2gitlab.ase.in.tum.de:2222/'
    # ssh-keys-url-path: /plugins/servlet/ssh/account/keys # Url Path to access a users ssh keys, for gitlab this is '/-/profile/keys'
    #        ssh-private-key-folder-path: <ssh-private-key-folder-path>       # the path to the folder in which the private ssh key file (e.g. id_rsa) is stored that can be used to clone git repos on the version control server
    #        ssh-private-key-password: <ssh-private-key-password>        # the password for the private ssh key
    default-branch: "main" # The branch that should be used as default branch for all newly created repositories. This does NOT have to be equal to the default branch of the VCS
    version-control-access-token: true # only for Gitlab setups: a Gitlab-API token can be generated for each user and used as part of the Git clone URL shown to students to allow for password-less Git operations via HTTP
  continuous-integration:
    url: "$GITLAB_URL"
    # user: <username>                # e.g. ga12abc
    # password: <password>
    # token: <token>                  # Enter a valid token generated in Bamboo giving Artemis full Admin access
    # vcs-application-link-name: LS1 Bitbucket Server # If the VCS and CI are directly linked (normally only for Bitbucket + Bamboo)
    # empty-commit-necessary: true # Do we need an empty commit for new exercises/repositories in order for the CI to register the repo
    # Hash/key of the ci-token, equivalent e.g. to the ci-token in version-control
    # Some CI systems, like Jenkins, offer a specific token that gets checked against any incoming notifications
    # from a VCS trying to trigger a build plan. Only if the notification request contains the correct token, the plan
    # is triggered. This can be seen as an alternative to sending an authenticated request to a REST API and then
    # triggering the plan.
    # In the case of Artemis, this is only really needed for the Jenkins + GitLab setup, since the GitLab plugin in
    # Jenkins only allows triggering the Jenkins jobs using such a token. Furthermore, in this case, the value of the
    # hudson.util.Secret is stored in the build plan, so you also have to specify this encrypted string here and NOT the actual token value itself!
    # You can get this by GETting any job.xml for a job with an activated GitLab step and your token value of choice.
    # secret-push-token: <token hash>
    # Key of the saved credentials for the VCS service
    # Bamboo, GitLab CI: not needed
    # Jenkins: You have to specify the key from the credentials page in Jenkins under which the user and
    #          password for the VCS are stored
    # vcs-credentials: <credentials key>
    # Key of the credentials for the Artemis notification token
    # Bamboo: not needed
    # Jenkins: You have to specify the key from the credentials page in Jenkins under which the authentication-token is stored
    # artemis-authentication-token-key: <credentials key>
    # The actual value of the notification token to check against in Artemis. This is the token that gets send with
    # every request the CI system makes to Artemis containing a new result after a build.
    # Bamboo, GitLab CI: The token value you use for the Server Notification Plugin
    # Jenkins: The token value you use for the Server Notification Plugin and is stored under the notification-token credential above
    artemis-authentication-token-value: "$NOTIFICATION_PLUGIN_TOKEN"
    build-timeout: 30 # Does cancel jenkins builds after 30 minutes to remove build that get stuck
    # notification-plugin: "ls1tum/artemis-notification-plugin:1.0.0" # Docker image for the generic notification plugin. This value is set in an CI variable in GitLab CI.
  git:
    name: "Artemis"
    email: "$GITLAB_ROOT_EMAIL"
  athene:
    url: "localhost"
    base64-secret: "$ATHENE_SECRET"
    token-validity-in-seconds: 10800
  apollon:
    conversion-service-url: "localhost:8080"

# ===================================================================
# Spring Boot configuration for the "prod" profile.
#
# This configuration overrides the application.yml file.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

management:
  metrics:
    export:
      prometheus:
        enabled: true
  health:
    mail:
      enabled: true

spring:
  devtools:
    restart:
      enabled: false
    livereload:
      enabled: false
  datasource:
    # type: "com.zaxxer.hikari.HikariDataSource"
    url: "jdbc:mysql://$MYSQL_HOST:$MYSQL_PORT/Artemis?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC"
    username: "root"
    password: # TODO: add password
    hikari:
      poolName: "Hikari"
      auto-commit: false
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
  jpa:
    # database-platform: "org.hibernate.dialect.MySQL8Dialect"
    database: "MYSQL"
    show-sql: false
  liquibase:
    contexts: "prod"
  mail:
    host: "$MAIL_HOST"
    port: "$MAIL_PORT"
    username: "$MAIL_USERNAME"
    password: "$MAIL_PASSWORD"
    protocol: smtp
    tls: true
    properties.mail.smtp:
        auth: true
        starttls:
            enable: true
        ssl:
            trust: "$MAIL_HOST"
  thymeleaf:
    cache: true

# ===================================================================
# To enable TLS in production, generate a certificate using:
# keytool -genkey -alias artemis -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
#
# You can also use Let's Encrypt:
# https://maximilian-boehm.com/hp2121/Create-a-Java-Keystore-JKS-from-Let-s-Encrypt-Certificates.htm
#
# Then, modify the server.ssl properties so your "server" configuration looks like:
#
# server:
#    port: 443
#    ssl:
#        key-store: classpath:config/tls/keystore.p12
#        key-store-password: password
#        key-store-type: PKCS12
#        key-alias: Artemis
#        # The ciphers suite enforce the security by deactivating some old and deprecated SSL cipher, this list was tested against SSL Labs (https://www.ssllabs.com/ssltest/)
#        ciphers: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
# ===================================================================

server: # TODO: add SSL
  url: "$ARTEMIS_HOST"
  port: "$ARTEMIS_PORT" # The port of artemis
  compression:
    enabled: true
    mime-types: "text/html,text/xml,text/plain,text/css,application/javascript,application/json,image/svg+xml"
    min-response-size: 1024
  # ssl:
  #   key-store: classpath:config/tls/keystore.p12
  #   key-store-password: password
  #   key-store-type: PKCS12
  #   key-alias: Artemis
  #   # The ciphers suite enforce the security by deactivating some old and deprecated SSL cipher, this list was tested against SSL Labs (https://www.ssllabs.com/ssltest/)
  #   ciphers: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,TLS_RSA_WITH_CAMELLIA_128_CBC_SHA

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  http:
    cache: # Used by the CachingHttpHeadersFilter
      timeToLiveInDays: 1461 # 4 Years 1 Day
  security:
    authentication:
      jwt:
        # This token must be encoded using Base64 (you can type `echo 'secret-key'|base64` on your command line)
        # As this is the PRODUCTION configuration, you MUST change the default key, and store it securely:
        # - In the JHipster Registry (which includes a Spring Cloud Config server)
        # - In a separate `application-prod.yml` file, in the same folder as your executable WAR file
        # - In the `JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET` environment variable
        base64-secret: "$JHIPSTER_JWT_SECRET"
        # Token is valid 24 hours
        token-validity-in-seconds: 86400
        token-validity-in-seconds-for-remember-me: 2592000
  mail: # specific JHipster mail property, for standard properties see MailProperties
    from: "Artemis <$ARTEMIS_ADMIN_EMAIL>"
    base-url: "$ARTEMIS_HOST"
  logging:
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: false
      # host: localhost
      # port: 5000
      # queue-size: 512
  audit-events:
    retention-period: 120 # Number of days before audit events are deleted.

# Properties to be exposed on the /info management endpoint
info: # TODO: Update where needed
  # guided-tour:
  # courseShortName: "artemistutorial"
  # course-group-students: "artemis-artemistutorial-students"
  # tours:
  # - cancel_tour: ""
  # - code_editor_tour: "tutorial"
  # - course_overview_tour: ""
  # - course_exercise_overview_tour: "tutorial"
  # - modeling_tour: "UML Class Diagram"
  # - programming_exercise_fail_tour: "tutorial"
  # - programming_exercise_success_tour: "tutorial"
  # - tutor_assessment_tour: "Patterns in Software Engineering"
  contact: "$ARTEMIS_ADMIN_EMAIL" #default value, can be overridden on the server
  # test-server: false # false --> production, true --> test server, --> empty == local
  # Specifies whether text assessment analytics service (TextAssessmentEventResource) is enabled/disabled
  # default value set to false in production
  # text-assessment-analytics-enabled: false
# logging:
#   level:
#     ROOT: DEBUG
#     de.tum.in.www1.artemis: DEBUG
#     tech.jhipster: DEBUG
#     liquibase: ERROR
